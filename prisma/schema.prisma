datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// ---------------- SIGNUP / AUTH INFO ----------------
model Student {
    id                  Int      @id @default(autoincrement())
    firstName           String
    middleName          String
    lastName            String
    stuID               String   @unique
    PRN                 String   @unique
    email               String   @unique
    password            String
    role                String   @default("student")
    resetPasswordToken  String?  @unique

    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    // Relations
    personalDetails     PersonalDetails?
    Admissions          Admission[]
    Achievements        Achievement[]
    SemesterInfos       SemesterInfo[]
}

// ---------------- ADMIN ----------------
model Admin {
    id                  Int      @id @default(autoincrement())
    name                String
    email               String   @unique
    password            String   // store hashed password
    role                String   @default("admin") 
    resetPasswordToken  String?  @unique

    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

// ---------------- PERSONAL DETAILS ----------------
model PersonalDetails {
    id              Int      @id @default(autoincrement())
    student         Student  @relation(fields: [studentId], references: [id])
    studentId       Int      @unique

    branch          String?
    dob             DateTime?
    bloodGroup      String?

    currentStreet   String?
    currentCity     String
    currentPincode  String?

    nativeStreet    String?
    nativeCity      String
    nativePincode   String?

    category        String?
    mobileNo        String
    parentMobileNo  String

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

// ---------------- ADMISSION ----------------
model Admission {
    id                   Int      @id @default(autoincrement())
    student              Student  @relation(fields: [studentId], references: [id])
    studentId            Int
    rollno               String?
    year                 String?
    div                  String?
    course               String
    admissionDate        DateTime @default(now())
    status               String   @default("pending")
    fees                 Float
    isFeesPaid           Boolean  @default(false)
    isScholarshipApplied Boolean  @default(false)
    academicYear         String

    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
}

// ---------------- ACHIEVEMENT ----------------
model Achievement {
    id               Int      @id @default(autoincrement())
    student          Student  @relation(fields: [studentId], references: [id])
    studentId        Int

    category         Category
    title            String
    description      String
    issuedBy         String

    fromDate         DateTime
    toDate           DateTime

    achievementType  AchievementType

    // Array of team members (Prisma supports Json for flexible lists)
    teamMembers      Json?

    // Photographs
    eventPhoto       String
    certificateURL   String

    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}

// Enums for strict category & achievement type
enum Category {
    CodingCompetitions
    Committee
    Hackathons
    Sports
    Cultural
    Technical
}

enum AchievementType {
    Participation
    Winner
    RunnerUp
}



// ---------------- SEMESTER INFO ----------------
model SemesterInfo {
    id          Int       @id @default(autoincrement())
    student     Student   @relation(fields: [studentId], references: [id])
    studentId   Int

    semester    Int
    attendance  Float?

    // Array of subject codes with KTs (backlogs) → use Json for flexibility
    kts         Json?

    // Relation: one semester info → many marks
    marks       SemesterMark[]

    isDefaulter Boolean   @default(false)

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

// SEMESTER MARKS 
model SemesterMark {
    id            Int          @id @default(autoincrement())
    semesterInfo  SemesterInfo @relation(fields: [semesterInfoId], references: [id])
    semesterInfoId Int

    subject       String
    score         Float
    outOf         Float
}


