datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------- SIGNUP / AUTH INFO ----------------
model Student {
  id         Int    @id @default(autoincrement())
  firstName  String
  middleName String
  lastName   String
  stuID      String @unique
  PRN        String @unique
  email      String @unique
  password   String
  role      String   @default("student")

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  personalDetails PersonalDetails?
  Admissions      Admission[]
  otps            Otp[]
}

// ---------------- ADMIN ----------------
model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String   // store hashed password
  role      String   @default("admin") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  otps            Otp[]
}


model Otp {
  id          Int      @id @default(autoincrement())
  otp         String   // store hashed OTP
  otpExpiry   DateTime
  otpAttempts Int      @default(0)

  // Relations (either Student or Admin will be linked)
  student     Student? @relation(fields: [studentId], references: [id])
  studentId   Int?

  admin       Admin?   @relation(fields: [adminId], references: [id])
  adminId     Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



// ---------------- PERSONAL DETAILS ----------------
model PersonalDetails {
  id             Int      @id @default(autoincrement())
  student        Student  @relation(fields: [studentId], references: [id])
  studentId      Int      @unique

  branch         String?
  dob            DateTime?
  bloodGroup     String?

  currentStreet  String?
  currentCity    String
  currentPincode String?

  nativeStreet   String?
  nativeCity     String
  nativePincode  String?

  category       String?
  mobileNo       String
  parentMobileNo String

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// ---------------- ADMISSION ----------------
model Admission {
  id                   Int      @id @default(autoincrement())
  student              Student  @relation(fields: [studentId], references: [id])
  studentId            Int
  rollno               String?
  year                 String?
  div                  String?
  course               String
  admissionDate        DateTime @default(now())
  status               String   @default("pending")
  fees                 Float
  isFeesPaid           Boolean  @default(false)
  isScholarshipApplied Boolean  @default(false)
  academicYear         String
}
